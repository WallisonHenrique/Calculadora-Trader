{"version":3,"sources":["managemenstList.js","Form.js","Management.js","helps.js","calcManagement.js","Managements.js","App.js","serviceWorker.js","index.js"],"names":["payout","Form","props","state","minEntry","handleSubmit","bind","handleChange","event","target","value","this","setState","form","config","entry","currency","entries","onCalcSubmit","preventDefault","className","onSubmit","name","type","defaultValue","min","max","onChange","React","Component","Management","management","listOfEntries","expense","title","profit","map","index","key","toFixed","replace","netProfit","grossProfit","calcEntries","calcEntry","newEntry","parseFloat","applied","i","push","lastEntry","length","getAddedValue","iAdd","prev","current","gross","calcManagement","category","addedValue","recoverMoney","managementsList","Managements","results","data","App","handleCalcSubmit","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e272c663.chunk.js","sourcesContent":["import calcManagement from './calcManagement';\r\nimport { netProfit, grossProfit, toPercent } from './helps';\r\n\r\nvar payout;\r\n\r\n// atualiza valor baseado no payout\r\nconst recoverMoney = (value) => {\r\n    return value / payout;\r\n}\r\n\r\nconst managementsList = (config) => {\r\n    const entry = config.entry;\r\n    payout = toPercent(config.payout);\r\n    config.payout = payout;\r\n    \r\n    // lógica dos gerenciamentos\r\n    const soRecupera = () => calcManagement(config, 'Só recupera', (prev, applied) => {\r\n        return recoverMoney(applied);\r\n    });\r\n\r\n    const martingale = () => calcManagement(config, 'Martingale', (prev) => {\r\n        return prev * 2;\r\n    });\r\n\r\n    const martingaleC = () => calcManagement(config, 'Martingale Conservador', (prev, applied) => {\r\n        return recoverMoney(applied + netProfit(entry, payout));\r\n    });\r\n\r\n    const castical = () => calcManagement(config, 'Castiçal', (prev) => {\r\n        return (prev / .3) * .7;\r\n    });\r\n\r\n    // por favor, não excluir\r\n    /*const castical2 = () => calcManagement(config, 'Castiçal 2.0', (prev, applied) => {\r\n        return recoverMoney(applied + netProfit(applied, payout));\r\n    });\r\n\r\n    const casticalC = () => calcManagement(config, 'Ganha nas Anteriores', (prev, applied, listOfEntries) => {\r\n        var initialProfit = entry * payout;\r\n        return recoverMoney(initialProfit * listOfEntries.length + applied, payout);\r\n    });*/\r\n\r\n    const soros = () => calcManagement(config, 'Soros', (prev) => {\r\n        return grossProfit(prev, payout);\r\n    }, 'iAdd');\r\n\r\n    return [soRecupera(), martingale(), martingaleC(), castical(), soros()];\r\n}\r\n\r\nexport default managementsList;","import React from 'react';\r\nimport './Form.css';\r\n\r\nclass Form extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { minEntry: 2 };\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        let minEntry;\r\n        if (event.target.value === \"R$\") {\r\n            minEntry = 2;\r\n        } else {\r\n            minEntry = 1;\r\n        }\r\n        this.setState({minEntry: minEntry});\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        const form = event.target;\r\n        const config = {\r\n            entry: form.entry.value,\r\n            currency: form.currency.value,\r\n            entries: form.entries.value,\r\n            payout: form.payout.value,\r\n        };\r\n        this.props.onCalcSubmit(config);\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        const { entry, currency, entries, payout } = this.props.config;\r\n        return (\r\n            <form className=\"Form\" onSubmit={this.handleSubmit}>\r\n                <div>\r\n                    <label>1° Entrada:</label>\r\n                    <input name=\"entry\" type=\"number\" defaultValue={entry} min={this.state.minEntry} max=\"20\"/>\r\n                </div>\r\n                <div>\r\n                    <label>Moeda:</label>\r\n                    <select name=\"currency\" defaultValue={currency} onChange={this.handleChange}>\r\n                        <option value=\"R$\">Real</option>\r\n                        <option value=\"$\">Dollar</option>\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <label>Qtd. Entradas:</label>\r\n                    <input  name=\"entries\" type=\"number\" defaultValue={entries} min=\"1\" max=\"7\"/>\r\n                </div>\r\n                <div>\r\n                    <label>Payout:</label>\r\n                    <input name=\"payout\" type=\"number\" defaultValue={payout} min=\"50\" max=\"100\"/>\r\n                </div>\r\n                <button type=\"submit\">=</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport './Management.css';\r\n\r\nconst Management = (props) => {\r\n    const {listOfEntries, expense, title, profit} = props.management;\r\n    const { currency } = props;\r\n    return(\r\n        <tr className=\"Management\">\r\n            <td>{title}</td>\r\n            <td>\r\n                {listOfEntries.map((entry, index)=>{\r\n                    return <span key={index}>{currency}{entry.toFixed(2).replace('.', ',')}</span>\r\n                })}\r\n            </td>\r\n            <td>{currency}{expense.toFixed(2).replace('.', ',')}</td>\r\n            <td>{currency}{profit.toFixed(2).replace('.', ',')}</td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default Management; ","export const toPercent = (value) => {\r\n    return value / 100;\r\n}\r\n\r\nexport const netProfit = (value, payout) => {\r\n    return value * payout;\r\n}\r\n\r\nexport const grossProfit = (value, payout) => {\r\n    return value * (payout+1);\r\n}\r\n\r\n","import { grossProfit, netProfit } from './helps';\r\n\r\nconst calcEntries = (entry, entries, calcEntry) => {\r\n    let newEntry = parseFloat(entry),\r\n    listOfEntries = [newEntry],\r\n    applied = newEntry;\r\n\r\n    for(var i=0;i<entries-1;i++) {\r\n        newEntry = calcEntry(newEntry, applied, listOfEntries);\r\n        applied += newEntry;\r\n        listOfEntries.push(newEntry);\r\n    }\r\n\r\n    return {\r\n        listOfEntries: listOfEntries,\r\n        applied: applied,\r\n        lastEntry: listOfEntries[listOfEntries.length-1]\r\n    };\r\n}\r\n\r\nconst getAddedValue = (listOfEntries, payout) => {\r\n    let iAdd = 0, prev = 0;\r\n    for (let current of listOfEntries) {\r\n        const gross = grossProfit(prev, payout);\r\n        iAdd += current > gross ? current - gross : 0;\r\n        prev = current;\r\n    }\r\n    return iAdd;\r\n}\r\n\r\nconst calcManagement = (config, title, calcEntry, category='toRecover') => {\r\n    const { entry, entries, payout } = config;\r\n    const { listOfEntries, applied, lastEntry } = calcEntries(entry, entries, calcEntry);\r\n    let expense = 0, profit = 0;\r\n\r\n    if (category === \"toRecover\") {\r\n        profit = grossProfit(lastEntry, payout) - applied;\r\n        expense = applied; \r\n    } else {\r\n        const addedValue = getAddedValue(listOfEntries, payout);\r\n        profit = netProfit(applied, payout) - (addedValue - entry);\r\n        expense =  addedValue;\r\n    }\r\n   \r\n    return {\r\n        title: title,\r\n        listOfEntries: listOfEntries,\r\n        expense: expense,\r\n        profit: profit\r\n    };\r\n}\r\n\r\nexport default calcManagement;","import React from 'react';\r\nimport Management from './Management';\r\nimport managementsList from './managemenstList';\r\nimport './Managements.css';\r\n\r\nclass Managements extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        const results = managementsList(this.props.config);\r\n        const { currency } = this.props.config;        \r\n        return(\r\n            <div className=\"Managements\">\r\n                <table>\r\n                    <tbody>\r\n                        <tr>\r\n                            <th>Nome</th>\r\n                            <th>Entradas</th>\r\n                            <th>Banca</th>\r\n                            <th>Lucro</th>\r\n                        </tr>\r\n                        {results.map((data, index) => \r\n                            <Management key={index} management={data} currency={currency} />\r\n                        )}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Managements;","import React, { Component } from 'react';\r\nimport Form from './Form';\r\nimport Managements from './Managements';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      entry: 2,\r\n      currency: \"R$\",\r\n      entries: 3,\r\n      payout: 87\r\n    }\r\n\r\n    this.handleCalcSubmit = this.handleCalcSubmit.bind(this);\r\n  }\r\n  \r\n  handleCalcSubmit(config) {\r\n    this.setState(config);\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <article className=\"App\">\r\n        <div className=\"sidebar\">\r\n          <h1>Calculadora Opções Binárias</h1>\r\n          <Form onCalcSubmit={this.handleCalcSubmit} config={this.state} />\r\n        </div>\r\n        <Managements config={this.state} />\r\n      </article>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}