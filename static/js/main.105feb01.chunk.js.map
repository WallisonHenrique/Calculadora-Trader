{"version":3,"sources":["listaGerenciamentos.js","Form.js","Gerenciamento.js","ajudas.js","calcGerenciamento.js","Gerenciamentos.js","App.js","serviceWorker.js","index.js"],"names":["payout","Form","props","state","entradaMinima","handleSubmit","bind","handleChange","event","target","value","this","setState","form","config","entrada","moeda","entradas","onCalcSubmit","preventDefault","className","onSubmit","name","type","defaultValue","min","max","onChange","React","Component","Gerenciamento","gerenciamento","listaEntradas","gasto","titulo","lucro","map","index","key","toFixed","replace","lucroLiquido","valor","lucroBruto","calcEntradas","calcEntrada","novaEntrada","parseFloat","aplicado","i","push","ultimaEntrada","length","quantoAcresceu","acrescimo","anterior","atual","bruto","calcGerenciamento","tipo","valorAcrescido","recuperar","listaGerenciamentos","Gerenciamentos","resultados","dados","App","handleCalcSubmit","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.105feb01.chunk.js","sourcesContent":["import calcGerenciamento from './calcGerenciamento';\r\nimport { lucroLiquido, lucroBruto } from './ajudas';\r\n\r\nvar payout;\r\n\r\nconst paraPorcentagem = (valor) => {\r\n    return valor / 100;\r\n}\r\n\r\n// atualiza valor baseado no payout\r\nconst recuperar = (valor) => {\r\n    return valor / payout;\r\n}\r\n\r\n\r\nconst listaGerenciamentos = (config) => {\r\n    const entrada = config.entrada;\r\n    payout = paraPorcentagem(config.payout);\r\n    config.payout = payout;\r\n    \r\n    // lógica dos gerenciamentos\r\n    const soRecupera = () => calcGerenciamento(config, 'Só recupera', (anterior, aplicado) => {\r\n        return recuperar(aplicado);\r\n    });\r\n\r\n    const martingale = () => calcGerenciamento(config, 'Martingale', (anterior) => {\r\n        return anterior * 2;\r\n    });\r\n\r\n    const martingaleC = () => calcGerenciamento(config, 'Martingale Conservador', (anterior, aplicado) => {\r\n        return recuperar(aplicado + lucroLiquido(entrada, payout));\r\n    });\r\n\r\n    const castical = () => calcGerenciamento(config, 'Castiçal', (anterior, aplicado) => {\r\n        return (anterior / .3) * .7;\r\n    });\r\n\r\n    const castical2 = () => calcGerenciamento(config, 'Castiçal 2.0', (anterior, aplicado) => {\r\n        return recuperar(aplicado + lucroLiquido(aplicado, payout));\r\n    });\r\n\r\n    const casticalC = () => calcGerenciamento(config, 'Ganha nas Anteriores', (anterior, aplicado, listaEntradas) => {\r\n        var lucroInicial = entrada * payout;\r\n        return recuperar(lucroInicial * listaEntradas.length + aplicado, payout);\r\n    });\r\n\r\n    const soros = () => calcGerenciamento(config, 'Soros', (anterior, aplicado) => {\r\n        return lucroBruto(anterior, payout);\r\n    }, 'acrescimo');\r\n\r\n    \r\n\r\n    return [soRecupera(), martingale(), martingaleC(), castical(), soros()];\r\n}\r\n\r\nexport default listaGerenciamentos;","import React from 'react';\r\nimport './Form.css';\r\n\r\nclass Form extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { entradaMinima: 2 };\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        let entradaMinima;\r\n        if (event.target.value == \"R$\") {\r\n            entradaMinima = 2;\r\n        } else {\r\n            entradaMinima = 1;\r\n        }\r\n        this.setState({entradaMinima: entradaMinima});\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        const form = event.target;\r\n        const config = {\r\n            entrada: form.entrada.value,\r\n            moeda: form.moeda.value,\r\n            entradas: form.entradas.value,\r\n            payout: form.payout.value,\r\n        };\r\n        this.props.onCalcSubmit(config);\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        const { entrada, moeda, entradas, payout } = this.props.config;\r\n        return (\r\n            <form className=\"Form\" onSubmit={this.handleSubmit}>\r\n                <div>\r\n                    <label>1° Entrada:</label>\r\n                    <input name=\"entrada\" type=\"number\" defaultValue={entrada} min={this.state.entradaMinima} max=\"20\"/>\r\n                </div>\r\n                <div>\r\n                    <label>Moeda:</label>\r\n                    <select name=\"moeda\" defaultValue={moeda} onChange={this.handleChange}>\r\n                        <option value=\"R$\">Real</option>\r\n                        <option value=\"$\">Dollar</option>\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <label>Qtd. Entradas:</label>\r\n                    <input  name=\"entradas\" type=\"number\" defaultValue={entradas} min=\"1\" max=\"7\"/>\r\n                </div>\r\n                <div>\r\n                    <label>Payout:</label>\r\n                    <input name=\"payout\" type=\"number\" defaultValue={payout} min=\"50\" max=\"100\"/>\r\n                </div>\r\n                <button type=\"submit\">=</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport './Gerenciamento.css';\r\n\r\nconst Gerenciamento = (props) => {\r\n    const {listaEntradas, gasto, titulo, lucro} = props.gerenciamento;\r\n    const { moeda } = props;\r\n    return(\r\n        <tr className=\"Gerenciamento\">\r\n            <td>{titulo}</td>\r\n            <td>\r\n                {listaEntradas.map((entrada, index)=>{\r\n                    return <span key={index}>{moeda}{entrada.toFixed(2).replace('.', ',')}</span>\r\n                })}\r\n            </td>\r\n            <td>{moeda}{gasto.toFixed(2).replace('.', ',')}</td>\r\n            <td>{moeda}{lucro.toFixed(2).replace('.', ',')}</td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default Gerenciamento; ","export const toPorcent = (valor) => {\r\n    return valor / 100;\r\n}\r\n\r\nexport const lucroLiquido = (valor, payout) => {\r\n    return valor * payout;\r\n}\r\n\r\nexport const lucroBruto = (valor, payout) => {\r\n    return valor * (payout+1);\r\n}\r\n\r\n","import { lucroBruto, lucroLiquido } from './ajudas';\r\n\r\nconst calcEntradas = (entrada, entradas, calcEntrada) => {\r\n    let novaEntrada = parseFloat(entrada),\r\n    listaEntradas = [novaEntrada],\r\n    aplicado = novaEntrada;\r\n\r\n    for(var i=0;i<entradas-1;i++) {\r\n        novaEntrada = calcEntrada(novaEntrada, aplicado, listaEntradas);\r\n        aplicado += novaEntrada;\r\n        listaEntradas.push(novaEntrada);\r\n    }\r\n\r\n    return {\r\n        listaEntradas: listaEntradas,\r\n        aplicado: aplicado,\r\n        ultimaEntrada: listaEntradas[listaEntradas.length-1]\r\n    };\r\n}\r\n\r\nconst quantoAcresceu = (listaEntradas, payout) => {\r\n    let acrescimo = 0, anterior = 0;\r\n    for (let atual of listaEntradas) {\r\n        const bruto = lucroBruto(anterior, payout);\r\n        acrescimo += atual > bruto ? atual - bruto : 0;\r\n        anterior = atual;\r\n    }\r\n    return acrescimo;\r\n}\r\n\r\nconst calcGerenciamento = (config, titulo, calcEntrada, tipo='perdendo') => {\r\n    const { entrada, entradas, payout } = config;\r\n    const { listaEntradas, aplicado, ultimaEntrada } = calcEntradas(entrada, entradas, calcEntrada);\r\n    let gasto = 0, lucro = 0;\r\n\r\n    if (tipo == \"perdendo\") {\r\n        lucro = lucroBruto(ultimaEntrada, payout) - aplicado;\r\n        gasto = aplicado; \r\n    } else {\r\n        const valorAcrescido = quantoAcresceu(listaEntradas, payout);\r\n        lucro = lucroLiquido(aplicado, payout) - (valorAcrescido - entrada);\r\n        gasto =  valorAcrescido;\r\n    }\r\n   \r\n    return {\r\n        titulo: titulo,\r\n        listaEntradas: listaEntradas,\r\n        gasto: gasto,\r\n        lucro: lucro\r\n    };\r\n}\r\n\r\nexport default calcGerenciamento;","import React from 'react';\r\nimport Gerenciamento from './Gerenciamento';\r\nimport listaGerenciamentos from './listaGerenciamentos';\r\nimport './Gerenciamentos.css';\r\n\r\nclass Gerenciamentos extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        const resultados = listaGerenciamentos(this.props.config);\r\n        const { moeda } = this.props.config;        \r\n        return(\r\n            <div className=\"Gerenciamentos\">\r\n                <table>\r\n                    <tbody>\r\n                        <tr>\r\n                            <th>Nome</th>\r\n                            <th>Entradas</th>\r\n                            <th>Banca</th>\r\n                            <th>Lucro</th>\r\n                        </tr>\r\n                        {resultados.map((dados, index) => \r\n                            <Gerenciamento key={index} gerenciamento={dados} moeda={moeda} />\r\n                        )}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Gerenciamentos;","import React, { Component } from 'react';\nimport Form from './Form';\nimport Gerenciamentos from './Gerenciamentos';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      entrada: 2,\n      moeda: \"R$\",\n      entradas: 3,\n      payout: 87\n    }\n\n    this.handleCalcSubmit = this.handleCalcSubmit.bind(this);\n  }\n  \n  handleCalcSubmit(config) {\n    this.setState(config);\n  }\n\n  render () {\n    return (\n      <article className=\"App\">\n        <div className=\"sidebar\">\n          <h1>Calculadora Trader</h1>\n          <Form onCalcSubmit={this.handleCalcSubmit} config={this.state} />\n        </div>\n        <Gerenciamentos config={this.state} />\n      </article>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}